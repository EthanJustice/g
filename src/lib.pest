// types
number = @{ int ~ ("." ~ ASCII_DIGIT*)? ~ (^"e" ~ int)? }
    int = { ("+" | "-")? ~ ASCII_DIGIT+ }

// taken from https://pest.rs/book/examples/json.html
string = { "\"" ~ inner ~ "\"" }
inner = @{ char* }
char = _{
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

boolean = { "true" | "false" }

// umbrella (any) type
any_type = { number | string | boolean | expression }

// operations
operation = @{ add | subtract | multiply | divide | modulo | exponent | root }
    add                   = { "+" }
    subtract              = { "-" }
    multiply              = { "*" }
    divide                = { "/" }
    modulo = { "%" }
    exponent              = { "^" }
    root               = { "^/" }

expression = { number ~ operation ~ number }

// variable validation
valid_variable_name = @{ ASCII_ALPHA+ ~ ("_"? ~ ASCII_ALPHA+)* }

// variable declarations

variable = { let_variable | man_variable | const_variable }
    let_variable = { "let" ~ valid_variable_name ~ "=" ~ any_type }
    man_variable = { "man" ~ string ~ " as " ~ valid_variable_name ~ "=" ~ any_type }
    const_variable = { "const" ~ valid_variable_name ~ "=" ~ any_type }

WHITESPACE = _{ " " | "\t" }

// modules
import_pkg = { "use " ~ string }

// comments

inner_without_slashes = @{ char_without_slashes* }
char_without_slashes = {
    !("//" | "//") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}
end_of_comment = { NEWLINE | "//" | "///" }

// comment is only used for documenting code
internal_comment = { "// " ~ inner_without_slashes }
process_comment = { "/// " ~ inner_without_slashes ~ end_of_comment }
doc_comment = { "//!" ~ inner_without_slashes ~ end_of_comment }

comment = { internal_comment | process_comment | doc_comment }

// patterns
statement = { comment | variable }

pattern = { "pattern" ~ valid_variable_name ~ "(" ~ (valid_variable_name ~ ",")* ~ ")" ~ "{" ~ statement* ~ "}" }

any = { import_pkg | comment | variable | pattern }
